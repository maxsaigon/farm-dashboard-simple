rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for role checking
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner() {
      return isAuthenticated() && request.auth.uid == 'O6aFgoNhDigSIXk6zdYSDrFWhWG2';
    }

    // Note: Firestore rules cannot efficiently query collections
    // Instead, we allow users to read farmAccess documents where they are the userId
    // and check permissions in the document rules

    // Users collection - users can read/write their own profile
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isOwner());
      allow write: if isAuthenticated() && (request.auth.uid == userId || isOwner());
      allow create: if isAuthenticated();
    }

    // Farms collection - simplified access control
    // For now, allow authenticated users to read/write farms
    // TODO: Implement proper farm-level access control
    match /farms/{farmId} {
      allow read: if isAuthenticated() || isOwner();
      allow write: if isAuthenticated() || isOwner();
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() || isOwner();

      // Subcollections inherit farm permissions
      match /{document=**} {
        allow read: if isAuthenticated() || isOwner();
        allow write: if isAuthenticated() || isOwner();
        allow create: if isAuthenticated() || isOwner();
        allow delete: if isAuthenticated() || isOwner();
      }
    }

    // Farm access control
    match /farmAccess/{accessId} {
      allow read: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId ||
         isOwner());
      allow write: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId ||
         isOwner());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId ||
         isOwner());
    }

    // Admin-only collections (super admin only)
    match /adminConfig/{document=**} {
      allow read, write: if isOwner();
    }

    // Farm invitations
    match /farmInvitations/{invitationId} {
      allow read: if isAuthenticated() &&
        (request.auth.uid == resource.data.invitedBy ||
         isOwner());
      allow write: if isAuthenticated() || isOwner();
      allow create: if isAuthenticated() || isOwner();
    }

    // User farm access (legacy collection)
    match /userFarmAccess/{accessId} {
      allow read: if isAuthenticated() &&
        (request.auth.uid == resource.data.userId ||
         isOwner());
      allow write: if isAuthenticated() || isOwner();
    }

    // Zones collection
    match /zones/{zoneId} {
      allow read: if isAuthenticated() || isOwner();
      allow write: if isAuthenticated() || isOwner();
      allow create: if isAuthenticated() || isOwner();
      allow delete: if isAuthenticated() || isOwner();
    }

    // Investments collection
    match /investments/{investmentId} {
      allow read: if isAuthenticated() || isOwner();
      allow write: if isAuthenticated() || isOwner();
      allow create: if isAuthenticated() || isOwner();
      allow delete: if isAuthenticated() || isOwner();
    }

    // Global collections with restricted access
    match /audit/{document=**} {
      allow read, write: if isOwner();
    }

    match /system/{document=**} {
      allow read, write: if isOwner();
    }

    // Allow all other collections for authenticated users (temporary)
    match /{document=**} {
      allow read, write, create, delete: if isAuthenticated() || isOwner();
    }
  }
}