// Custom Field Types for Tree Management
// Optimized for durian farmers with mobile-first design

export type CustomFieldType = 
  | 'fruit_count' 
  | 'quick_notes' 
  | 'harvest_date' 
  | 'health_status' 
  | 'watering_notes' 
  | 'measurements' 
  | 'yes_no' 
  | 'custom_text'

export type CustomFieldCategory = 'harvest' | 'health' | 'care' | 'basic'

export interface CustomFieldDefinition {
  id: string
  type: CustomFieldType
  label: string
  labelVi: string
  category: CustomFieldCategory
  icon: string
  placeholder?: string
  placeholderVi?: string
  unit?: string
  options?: string[]
  optionsVi?: string[]
  required?: boolean
  min?: number
  max?: number
  multiline?: boolean
}

export interface CustomFieldValue {
  fieldId: string
  value: string | number | boolean | Date
  updatedAt: Date
  updatedBy?: string
}

export interface TreeCustomFields {
  treeId: string
  fields: CustomFieldValue[]
  lastUpdated: Date
}

// Predefined field templates optimized for durian farming
export const PREDEFINED_FIELDS: CustomFieldDefinition[] = [
  {
    id: 'fruit_count',
    type: 'fruit_count',
    label: 'Fruit Count',
    labelVi: 'S·ªë L∆∞·ª£ng Tr√°i',
    category: 'harvest',
    icon: 'üçé',
    placeholder: 'Enter number of fruits',
    placeholderVi: 'Nh·∫≠p s·ªë l∆∞·ª£ng tr√°i',
    min: 0,
    max: 999
  },
  {
    id: 'quick_notes',
    type: 'quick_notes',
    label: 'Quick Notes',
    labelVi: 'Ghi Ch√∫ Nhanh',
    category: 'basic',
    icon: 'üìù',
    placeholder: 'Add notes about this tree...',
    placeholderVi: 'Th√™m ghi ch√∫ v·ªÅ c√¢y n√†y...',
    multiline: true
  },
  {
    id: 'last_harvest',
    type: 'harvest_date',
    label: 'Last Harvest Date',
    labelVi: 'Ng√†y Thu Ho·∫°ch Cu·ªëi',
    category: 'harvest',
    icon: 'üìÖ',
    placeholder: 'Select harvest date',
    placeholderVi: 'Ch·ªçn ng√†y thu ho·∫°ch'
  },
  {
    id: 'health_status',
    type: 'health_status',
    label: 'Health Status',
    labelVi: 'T√¨nh Tr·∫°ng S·ª©c Kh·ªèe',
    category: 'health',
    icon: 'üå°Ô∏è',
    options: ['Excellent', 'Good', 'Fair', 'Poor', 'Diseased'],
    optionsVi: ['R·∫•t T·ªët', 'T·ªët', 'Trung B√¨nh', 'K√©m', 'B·ªánh']
  },
  {
    id: 'watering_schedule',
    type: 'watering_notes',
    label: 'Watering Notes',
    labelVi: 'Ghi Ch√∫ T∆∞·ªõi N∆∞·ªõc',
    category: 'care',
    icon: 'üíß',
    placeholder: 'Watering schedule and notes...',
    placeholderVi: 'L·ªãch t∆∞·ªõi n∆∞·ªõc v√† ghi ch√∫...',
    multiline: true
  },
  {
    id: 'tree_height',
    type: 'measurements',
    label: 'Tree Height',
    labelVi: 'Chi·ªÅu Cao C√¢y',
    category: 'basic',
    icon: 'üìè',
    unit: 'meters',
    placeholder: 'Height in meters',
    placeholderVi: 'Chi·ªÅu cao t√≠nh b·∫±ng m√©t',
    min: 0,
    max: 50
  },
  {
    id: 'needs_pruning',
    type: 'yes_no',
    label: 'Needs Pruning',
    labelVi: 'C·∫ßn T·ªâa C√†nh',
    category: 'care',
    icon: '‚úÇÔ∏è'
  },
  {
    id: 'fertilized_recently',
    type: 'yes_no',
    label: 'Fertilized Recently',
    labelVi: 'ƒê√£ B√≥n Ph√¢n G·∫ßn ƒê√¢y',
    category: 'care',
    icon: 'üå±'
  }
]

// Common templates for quick data entry
export const QUICK_NOTE_TEMPLATES = {
  en: [
    'Tree looks healthy',
    'Needs more water',
    'Ready for harvest soon',
    'Pruning required',
    'Fertilizer applied',
    'Pest damage observed'
  ],
  vi: [
    'C√¢y tr√¥ng kh·ªèe m·∫°nh',
    'C·∫ßn t∆∞·ªõi n∆∞·ªõc th√™m',
    'S·∫Øp ƒë·∫øn l√∫c thu ho·∫°ch',
    'C·∫ßn t·ªâa c√†nh',
    'ƒê√£ b√≥n ph√¢n',
    'Ph√°t hi·ªán s√¢u b·ªánh'
  ]
}

export const WATERING_TEMPLATES = {
  en: [
    'Daily watering needed',
    'Water every 2 days',
    'Reduce watering in rainy season',
    'Deep watering once a week',
    'Check soil moisture first'
  ],
  vi: [
    'C·∫ßn t∆∞·ªõi n∆∞·ªõc h√†ng ng√†y',
    'T∆∞·ªõi n∆∞·ªõc 2 ng√†y m·ªôt l·∫ßn',
    'Gi·∫£m t∆∞·ªõi trong m√πa m∆∞a',
    'T∆∞·ªõi th·∫•m m·ªôt l·∫ßn m·ªói tu·∫ßn',
    'Ki·ªÉm tra ƒë·ªô ·∫©m ƒë·∫•t tr∆∞·ªõc'
  ]
}

// Categories for organizing fields
export const FIELD_CATEGORIES = {
  harvest: {
    label: 'Harvest',
    labelVi: 'Thu Ho·∫°ch',
    icon: 'üçé',
    color: 'bg-orange-100 border-orange-200 text-orange-800'
  },
  health: {
    label: 'Health',
    labelVi: 'S·ª©c Kh·ªèe',
    icon: 'üå°Ô∏è',
    color: 'bg-red-100 border-red-200 text-red-800'
  },
  care: {
    label: 'Care',
    labelVi: 'ChƒÉm S√≥c',
    icon: 'üíß',
    color: 'bg-blue-100 border-blue-200 text-blue-800'
  },
  basic: {
    label: 'Basic Info',
    labelVi: 'Th√¥ng Tin C∆° B·∫£n',
    icon: 'üìù',
    color: 'bg-gray-100 border-gray-200 text-gray-800'
  }
}

// Utility functions
export function getFieldDefinition(fieldId: string): CustomFieldDefinition | undefined {
  return PREDEFINED_FIELDS.find(field => field.id === fieldId)
}

export function getFieldsByCategory(category: CustomFieldCategory): CustomFieldDefinition[] {
  return PREDEFINED_FIELDS.filter(field => field.category === category)
}

export function formatFieldValue(field: CustomFieldDefinition, value: any): string {
  if (value === null || value === undefined || value === '') return ''
  
  switch (field.type) {
    case 'fruit_count':
    case 'measurements':
      const numValue = typeof value === 'string' ? parseFloat(value) : value
      return field.unit ? `${numValue} ${field.unit}` : numValue.toString()
    
    case 'harvest_date':
      if (value instanceof Date) {
        return value.toLocaleDateString('vi-VN')
      }
      return new Date(value).toLocaleDateString('vi-VN')
    
    case 'health_status':
      if (field.options && field.optionsVi) {
        const index = field.options.indexOf(value.toString())
        return index >= 0 ? field.optionsVi[index] : value.toString()
      }
      return value.toString()
    
    case 'yes_no':
      return value ? 'C√≥' : 'Kh√¥ng'
    
    default:
      return value.toString()
  }
}

// Validation functions
export function validateFieldValue(field: CustomFieldDefinition, value: any): string | null {
  if (field.required && (value === null || value === undefined || value === '')) {
    return `${field.labelVi} l√† b·∫Øt bu·ªôc`
  }
  
  if (field.type === 'fruit_count' || field.type === 'measurements') {
    const numValue = typeof value === 'string' ? parseFloat(value) : value
    if (isNaN(numValue)) {
      return 'Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá'
    }
    if (field.min !== undefined && numValue < field.min) {
      return `Gi√° tr·ªã t·ªëi thi·ªÉu l√† ${field.min}`
    }
    if (field.max !== undefined && numValue > field.max) {
      return `Gi√° tr·ªã t·ªëi ƒëa l√† ${field.max}`
    }
  }
  
  return null
}